package Panopto::Interface::AccessManagement;

use Panopto;

# Generated by SOAP::Lite (v0.714) for Perl -- soaplite.com
# Copyright (C) 2000-2006 Paul Kulchenko, Byrne Reese
# -- generated at [Mon Aug 12 17:18:31 2013]
# -- generated from http://demo.hosted.panopto.com/Panopto/PublicAPI/4.2/AccessManagement.svc?wsdl
my %methods = (
RevokeGroupViewerAccessFromSession => {
    endpoint => '/Panopto/PublicAPI/4.2/AccessManagement.svc',
    soapaction => 'http://tempuri.org/IAccessManagement/RevokeGroupViewerAccessFromSession',
    namespace => 'http://tempuri.org/',
    parameters => [
    ], # end parameters
  }, # end RevokeGroupViewerAccessFromSession
UpdateFolderIsPublic => {
    endpoint => '/Panopto/PublicAPI/4.2/AccessManagement.svc',
    soapaction => 'http://tempuri.org/IAccessManagement/UpdateFolderIsPublic',
    namespace => 'http://tempuri.org/',
    parameters => [
    ], # end parameters
  }, # end UpdateFolderIsPublic
RevokeGroupAccessFromFolder => {
    endpoint => '/Panopto/PublicAPI/4.2/AccessManagement.svc',
    soapaction => 'http://tempuri.org/IAccessManagement/RevokeGroupAccessFromFolder',
    namespace => 'http://tempuri.org/',
    parameters => [
    ], # end parameters
  }, # end RevokeGroupAccessFromFolder
UpdateSessionInheritViewerAccess => {
    endpoint => '/Panopto/PublicAPI/4.2/AccessManagement.svc',
    soapaction => 'http://tempuri.org/IAccessManagement/UpdateSessionInheritViewerAccess',
    namespace => 'http://tempuri.org/',
    parameters => [
    ], # end parameters
  }, # end UpdateSessionInheritViewerAccess
GetSessionAccessDetails => {
    endpoint => '/Panopto/PublicAPI/4.2/AccessManagement.svc',
    soapaction => 'http://tempuri.org/IAccessManagement/GetSessionAccessDetails',
    namespace => 'http://tempuri.org/',
    parameters => [
    ], # end parameters
  }, # end GetSessionAccessDetails
GrantGroupViewerAccessToSession => {
    endpoint => '/Panopto/PublicAPI/4.2/AccessManagement.svc',
    soapaction => 'http://tempuri.org/IAccessManagement/GrantGroupViewerAccessToSession',
    namespace => 'http://tempuri.org/',
    parameters => [
    ], # end parameters
  }, # end GrantGroupViewerAccessToSession
RevokeUsersViewerAccessFromSession => {
    endpoint => '/Panopto/PublicAPI/4.2/AccessManagement.svc',
    soapaction => 'http://tempuri.org/IAccessManagement/RevokeUsersViewerAccessFromSession',
    namespace => 'http://tempuri.org/',
    parameters => [
    ], # end parameters
  }, # end RevokeUsersViewerAccessFromSession
GrantUsersViewerAccessToSession => {
    endpoint => '/Panopto/PublicAPI/4.2/AccessManagement.svc',
    soapaction => 'http://tempuri.org/IAccessManagement/GrantUsersViewerAccessToSession',
    namespace => 'http://tempuri.org/',
    parameters => [
    ], # end parameters
  }, # end GrantUsersViewerAccessToSession
GetUserAccessDetails => {
    endpoint => '/Panopto/PublicAPI/4.2/AccessManagement.svc',
    soapaction => 'http://tempuri.org/IAccessManagement/GetUserAccessDetails',
    namespace => 'http://tempuri.org/',
    parameters => [
    ], # end parameters
  }, # end GetUserAccessDetails
GrantUsersAccessToFolder => {
    endpoint => '/Panopto/PublicAPI/4.2/AccessManagement.svc',
    soapaction => 'http://tempuri.org/IAccessManagement/GrantUsersAccessToFolder',
    namespace => 'http://tempuri.org/',
    parameters => [
    ], # end parameters
  }, # end GrantUsersAccessToFolder
UpdateSessionIsPublic => {
    endpoint => '/Panopto/PublicAPI/4.2/AccessManagement.svc',
    soapaction => 'http://tempuri.org/IAccessManagement/UpdateSessionIsPublic',
    namespace => 'http://tempuri.org/',
    parameters => [
    ], # end parameters
  }, # end UpdateSessionIsPublic
GetFolderAccessDetails => {
    endpoint => '/Panopto/PublicAPI/4.2/AccessManagement.svc',
    soapaction => 'http://tempuri.org/IAccessManagement/GetFolderAccessDetails',
    namespace => 'http://tempuri.org/',
    parameters => [
    ], # end parameters
  }, # end GetFolderAccessDetails
GrantGroupAccessToFolder => {
    endpoint => '/Panopto/PublicAPI/4.2/AccessManagement.svc',
    soapaction => 'http://tempuri.org/IAccessManagement/GrantGroupAccessToFolder',
    namespace => 'http://tempuri.org/',
    parameters => [
    ], # end parameters
  }, # end GrantGroupAccessToFolder
RevokeUsersAccessFromFolder => {
    endpoint => '/Panopto/PublicAPI/4.2/AccessManagement.svc',
    soapaction => 'http://tempuri.org/IAccessManagement/RevokeUsersAccessFromFolder',
    namespace => 'http://tempuri.org/',
    parameters => [
    ], # end parameters
  }, # end RevokeUsersAccessFromFolder
GetGroupAccessDetails => {
    endpoint => '/Panopto/PublicAPI/4.2/AccessManagement.svc',
    soapaction => 'http://tempuri.org/IAccessManagement/GetGroupAccessDetails',
    namespace => 'http://tempuri.org/',
    parameters => [
    ], # end parameters
  }, # end GetGroupAccessDetails
GetSelfUserAccessDetails => {
    endpoint => '/Panopto/PublicAPI/4.2/AccessManagement.svc',
    soapaction => 'http://tempuri.org/IAccessManagement/GetSelfUserAccessDetails',
    namespace => 'http://tempuri.org/',
    parameters => [
    ], # end parameters
  }, # end GetSelfUserAccessDetails
); # end my %methods

use SOAP::Lite;
use Exporter;
use Carp ();

use vars qw(@ISA $AUTOLOAD @EXPORT_OK %EXPORT_TAGS);
@ISA = qw(Exporter SOAP::Lite);
@EXPORT_OK = (keys %methods);
%EXPORT_TAGS = ('all' => [@EXPORT_OK]);

sub _call {
    my ($self, $method) = (shift, shift);
    my $name = UNIVERSAL::isa($method => 'SOAP::Data') ? $method->name : $method;
    my %method = %{$methods{$name}};
    $self->proxy('http://' . Panopto->ServerName . $method{endpoint} || Carp::croak "No server address (proxy) specified")
        unless $self->proxy;
    my @templates = @{$method{parameters}};
    my @parameters = ();
    foreach my $param (@_) {
        if (@templates) {
            my $template = shift @templates;
            my ($prefix,$typename) = SOAP::Utils::splitqname($template->type);
            my $method = 'as_'.$typename;
            # TODO - if can('as_'.$typename) {...}
            my $result = $self->serializer->$method($param, $template->name, $template->type, $template->attr);
            push(@parameters, $template->value($result->[2]));
        }
        else {
            push(@parameters, $param);
        }
    }
    $self->endpoint('http://' . Panopto->ServerName . $method{endpoint})
       ->ns($method{namespace})
       ->on_action(sub{qq!"$method{soapaction}"!});
#  $self->serializer->register_ns("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd","wsu");
#  $self->serializer->register_ns("http://schemas.xmlsoap.org/wsdl/soap12/","soap12");
#  $self->serializer->register_ns("http://schemas.xmlsoap.org/ws/2004/08/addressing/policy","wsap");
#  $self->serializer->register_ns("http://schemas.xmlsoap.org/ws/2004/09/policy","wsp");
#  $self->serializer->register_ns("http://schemas.xmlsoap.org/wsdl/soap/","soap");
#  $self->serializer->register_ns("http://schemas.xmlsoap.org/wsdl/","wsdl");
#  $self->serializer->register_ns("http://schemas.xmlsoap.org/soap/encoding/","soapenc");
  $self->serializer->register_ns("http://tempuri.org/","tns");
#  $self->serializer->register_ns("http://www.w3.org/2001/XMLSchema","xsd");
#  $self->serializer->register_ns("http://schemas.xmlsoap.org/ws/2004/08/addressing","wsa");
#  $self->serializer->register_ns("http://www.w3.org/2005/08/addressing","wsa10");
#  $self->serializer->register_ns("http://schemas.microsoft.com/ws/2005/12/wsdl/contract","msc");
#  $self->serializer->register_ns("http://www.w3.org/2006/05/addressing/wsdl","wsaw");
#  $self->serializer->register_ns("http://www.w3.org/2007/05/addressing/metadata","wsam");
#  $self->serializer->register_ns("http://schemas.xmlsoap.org/ws/2004/09/mex","wsx");
    $self->serializer->register_ns('http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40', 'api');
    $self->serializer->register_ns('http://schemas.microsoft.com/2003/10/Serialization/Arrays', 'ser');
    my $som = $self->SUPER::call($method => @parameters);
    if ($self->want_som) {
        return $som;
    }
    UNIVERSAL::isa($som => 'SOAP::SOM') ? wantarray ? $som->paramsall : $som->result : $som;
}

sub BEGIN {
    no strict 'refs';
    for my $method (qw(want_som)) {
        my $field = '_' . $method;
        *$method = sub {
            my $self = shift->new;
            @_ ? ($self->{$field} = shift, return $self) : return $self->{$field};
        }
    }
}
no strict 'refs';
for my $method (@EXPORT_OK) {
    my %method = %{$methods{$method}};
    *$method = sub {
        my $self = UNIVERSAL::isa($_[0] => __PACKAGE__)
            ? ref $_[0]
                ? shift # OBJECT
                # CLASS, either get self or create new and assign to self
                : (shift->self || __PACKAGE__->self(__PACKAGE__->new))
            # function call, either get self or create new and assign to self
            : (__PACKAGE__->self || __PACKAGE__->self(__PACKAGE__->new));
        $self->_call($method, @_);
    }
}

sub AUTOLOAD {
    my $method = substr($AUTOLOAD, rindex($AUTOLOAD, '::') + 2);
    return if $method eq 'DESTROY' || $method eq 'want_som';
    die "Unrecognized method '$method'. List of available method(s): @EXPORT_OK\n";
}

1;
